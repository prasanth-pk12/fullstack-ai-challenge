services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: taskmanager-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d taskmanager"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: taskmanager-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://taskuser:taskpass@database:5432/taskmanager
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpass
      POSTGRES_DB: taskmanager
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      
      # Application Configuration
      SECRET_KEY: your-super-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      ENVIRONMENT: production
      
      # CORS Configuration
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:80,http://frontend:80"
      
      # File Upload Configuration
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 10485760  # 10MB
    volumes:
      - backend_uploads:/app/uploads
      - ./backend/app:/app/app:ro
    ports:
      - "8000:8000"
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: taskmanager-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
      NODE_ENV: production
    ports:
      - "80:80"
      - "3000:80"  # Alternative port for development
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
    name: taskmanager_postgres_data
  backend_uploads:
    driver: local
    name: taskmanager_uploads

# Custom Network
networks:
  taskmanager-network:
    driver: bridge
    name: taskmanager_network
